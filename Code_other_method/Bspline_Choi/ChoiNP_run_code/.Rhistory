metric_grid_count = 2000
metric_grid = seq(from=0,to=metric_upper_bound,length.out = metric_grid_count)
metric_grid_space = metric_upper_bound/metric_grid_count
Fixed_l_max=TRUE; option.range = 'Fixed'
epsilon = Cov_function(l_max * 2 * sqrt(2),option,par.cov)
m.m.tol = 0; m.1.tol=0
pd.adjust = TRUE;
n_seed = 1; doParallel = FALSE
#### setting parameters :DON NOT Change ######
if(option == 'Sph'|option == 'Wave'){
pos.coef = FALSE
}else{
pos.coef = TRUE; #whether estimation if positive or not
}
approx.option = 2;
if(option == 'Gaussian'){
approx.par = 10^(-6)
}else{
approx.par = 10^(-9);
}
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
Output.list = Data.Preparation.result$Output.list
l_max = Data.Preparation.result$Hidden.list$l_max
k=1
one.sample.all.m.list <- list()
print(k)
Y = Output.list$Y_matrix[k,,]
rho_matrix.orig = Output.list$rho_matrix.orig
Support.function(par.cov = c(1,3),option = 'Cauchy', epsilon = 0.001)
Support.function(par.cov = c(1,3),option = 'Cauchy', epsilon = 0.05)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=))
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=3))
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=6))
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=1.5))
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.05)
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.001)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=1.5))
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.05)
library("nloptr")
library("ggplot2")
library("reshape2")#melt
library("Matrix")
library("penalized")
library(foreach)
library(doParallel)
library("base")
library("msos") #logdet function
library('Rcpp') #basis matrix
library('inline') #Rcpp basis matrix
required_packages = c('nloptr','psych','psych','RcppZiggurat','Rfast','ggplot2','reshape2','Matrix','penalized','base','msos','Rcpp','inline','geoR')
code.path = '/Users/wangyiming/Documents/2019 Research Daily/research_code/Code_2020/Updated0620/Code0620/'
#server
source(paste0(code.path,"Code0912-0919/Part-I.Spectral.Cov.R"))
source(paste0(code.path,"Code0912-0919/Part-II.Data_Generation.R"))
source(paste0(code.path,"Code0912-0919/Part-III.Objective.functions.R"))
source(paste0(code.path,"Code0912-0919/Part-IIII.Check.Cov.Est_and_Plot.R"))
source(paste0(code.path,"Code1004-1010/Support.R"))
source(paste0(code.path,"Code1018-1025/LSE.w_tilde.R"))
source(paste0(code.path,"Code1018-1025/Additional_Covariance_Not_Inf_dim.R"))
#source(paste0(code.path,"Code1018-1025/Decide_Num_Basis.R"))
source(paste0(code.path,"Code1018-1025/Data_Preparation.R"))
source(paste0(code.path,"Code1018-1025/optimization.functions.R"))
source(paste0(code.path,"Code1018-1025/Plot.List.Result.R"))
source(paste0(code.path,"Code1018-1025/Write.List.Result.R"))
source(paste0(code.path,"Code1018-1025/Boxplot.all.seed.est.par.R"))
source(paste0(code.path,"Code1026-1031/optimize_with_range_w.R"))
source(paste0(code.path,"Code1026-1031/Sparse.weights.R"))
source(paste0(code.path,"Code1101-1107/Plot.List.Result.with.range.R"))
source(paste0(code.path,"Code1101-1107/Write.List.result.with.range.R"))
source(paste0(code.path,"Code0824-0830/Parametric_MLE.R"))
##############################################
################# Input ######################
##############################################
d = 2; n=60;
r = 200; N = 20;
l_max = 20
seed = 0;#seed for coord generation
#### for m_seq  #####
a_index = seq(from=0.05,to=0.9,by=0.05)
m_seq = unique(1+floor((n*r)^a_index))
m_seq = m_seq[m_seq < 500] #
option = 'Matern'; par.cov=c(1,1.25,1);metric_epsilon = 0.001; m_seq = m_seq[m_seq < 150] ##10.28
##### for metric grid setting #####
metric_upper_bound = Support.function(par.cov = c(1,par.cov[-1]),option = option, epsilon = metric_epsilon)
metric_grid_count = 2000
metric_grid = seq(from=0,to=metric_upper_bound,length.out = metric_grid_count)
metric_grid_space = metric_upper_bound/metric_grid_count
Fixed_l_max=TRUE; option.range = 'Fixed'
epsilon = Cov_function(l_max * 2 * sqrt(2),option,par.cov)
m.m.tol = 0; m.1.tol=0
pd.adjust = TRUE;
#####################################################
###### generate seed and optimization ####################
####################################################################
n_seed = 1; doParallel = FALSE
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
Output.list = Data.Preparation.result$Output.list
l_max = Data.Preparation.result$Hidden.list$l_max
eigen(Data.Preparation.result$Hidden.list$True.Sigma_matrix)$values
option
option = 'Matern'; par.cov=c(1,1.25,1);metric_epsilon = 0.001;
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
eigen(Data.Preparation.result$Hidden.list$True.Sigma_matrix)$values
option
option = 'Cauchy'; par.cov = c(1,0.8); metric_epsilon = 0.05;  ## 15.9
#option = 'Gaussian'; par.cov = c(1,3); metric_epsilon = 0.001; ## 7.88
#option = 'LinearMatern'; par.cov=c(1,1.25,1,3/2/sqrt(2),2); metric_epsilon = 0.001;m_seq = m_seq[m_seq < 150] ##10.55
#option = 'GenCauchy'; par.cov=c(1,0.3,0.5,2); metric_epsilon = 0.15 ##13.32996
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
eigen(Data.Preparation.result$Hidden.list$True.Sigma_matrix)$values
#Matern: min 0.1448789
option = 'Gaussian'; par.cov = c(1,3); metric_epsilon = 0.001; ## 7.88
#option = 'LinearMatern'; par.cov=c(1,1.25,1,3/2/sqrt(2),2); metric_epsilon = 0.001;m_seq = m_seq[m_seq < 150] ##10.55
#option = 'GenCauchy'; par.cov=c(1,0.3,0.5,2); metric_epsilon = 0.15 ##13.32996
N=2
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
eigen(Data.Preparation.result$Hidden.list$True.Sigma_matrix)$values
#Matern: min 0.1448789
#Cauchy: min 0.19688
option = 'LinearMatern'; par.cov=c(1,1.25,1,3/2/sqrt(2),2); metric_epsilon = 0.001;m_seq = m_seq[m_seq < 150] ##10.55
#option = 'GenCauchy'; par.cov=c(1,0.3,0.5,2); metric_epsilon = 0.15 ##13.32996
N=2
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
eigen(Data.Preparation.result$Hidden.list$True.Sigma_matrix)$values
#Matern: min 0.1448789
#Cauchy: min 0.19688
#Gaussian: min 0.00149
option = 'GenCauchy'; par.cov=c(1,0.3,0.5,2); metric_epsilon = 0.15 ##13.32996
N=2
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
eigen(Data.Preparation.result$Hidden.list$True.Sigma_matrix)$values
#Matern: min 0.1448789
#Cauch
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=1.5))
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.05)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=1.5))
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.01)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=1.5),ylim=c(0,1))
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.01)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=1.5),ylim=c(0,1))
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.01)
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=1.5),ylim=c(0,1))
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.01)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.4),ylim=c(0,1))
Support.function(par.cov = c(1,1.5),option = 'Cauchy', epsilon = 0.01)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.4),ylim=c(0,1))
Support.function(par.cov = c(1,0.4),option = 'Cauchy', epsilon = 0.01)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.6),ylim=c(0,1))
Support.function(par.cov = c(1,0.6),option = 'Cauchy', epsilon = 0.01)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.7),ylim=c(0,1))
Support.function(par.cov = c(1,0.7),option = 'Cauchy', epsilon = 0.01)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.8),ylim=c(0,1))
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.7),ylim=c(0,1))
layout(matrix(1:3,1,3))
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.8),ylim=c(0,1))
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.7),ylim=c(0,1))
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_Cauchy,theta_1=1,theta_2=0.6),ylim=c(0,1))
Support.function(par.cov = c(1,0.6),option = 'Cauchy', epsilon = 0.01)
20*sqrt(2)
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.3,0.5,2),ylim=c(0,1))
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.1,0.5,2),ylim=c(0,1))
Support.function(par.cov = c(1,0.3,0.5,2),option = 'GenCauchy', epsilon = 0.01)
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 1)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.3,0.5,2),ylim=c(0,1))
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 2)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.3,0.5,2),ylim=c(0,1))
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 2)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.3,0.5,2),ylim=c(0,1))
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 3)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.3,0.5,2),ylim=c(0,1))
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 4)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.3,0.5,2),ylim=c(0,1))
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 5)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.3,0.5,2),ylim=c(0,1))
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 3)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
plot(rho_matrix.orig,sapply(rho_matrix.orig, Cov_GenCauchy,theta_1=1,theta_2=0.1,0.5,2),ylim=c(0,1))
Support.function(par.cov = c(1,0.1,0.5,2),option = 'GenCauchy', epsilon = 0.01)
max(rho_matrix.orig)
Cov_GenCauchy(23.63,1,0.1,0.5,2)
Support.function(par.cov = c(1,0.8),option = 'Cauchy', epsilon = 0.01)
Support.function(par.cov = c(1,0.6),option = 'Cauchy', epsilon = 0.01)
Support.function(par.cov = c(1,0.3,0.5,2),option = 'GenCauchy', epsilon = 0.01)
Support.function(par.cov = c(1,0.3,0.5,2),option = 'GenCauchy', epsilon = 0.15)
Support.function(par.cov = c(1,0.3,0.5,2),option = 'GenCauchy', epsilon = 0.1)
Cov_function(24,'Cauchy',1,0.8)
Cov_Cauchy(24,1,0.8)
option = 'GenCauchy'; par.cov=c(1,0.3,0.5,2); metric_epsilon = 0.15 ##13.32996
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 3)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
option = 'GenCauchy'; par.cov=c(1,0.3,0.5,2); metric_epsilon = 0.15 ##13.32996
Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d,N,r,n,l_max=l_max,seed = 0)
rho_matrix.orig = Data.Preparation.result$Output.list$rho_matrix.orig
Support.function(par.cov = c(1,0.8),option = 'Cauchy',epsilon=0.01)
Support.function(par.cov = c(1,0.6),option = 'Cauchy',epsilon=0.01)
Support.function(par.cov = c(1,0.4),option = 'Cauchy',epsilon=0.01)
layout(matrix(1:3,1,3))
plot(rho_matrix.orig,sapply(rho_matrix.orig,Cov_Cauchy,1,0.8))
plot(rho_matrix.orig,sapply(rho_matrix.orig,Cov_Cauchy,1,0.6))
plot(rho_matrix.orig,sapply(rho_matrix.orig,Cov_Cauchy,1,0.4))
?cov.spatial
Cov_Cauchy
Support.function(par.cov = c(1,0.8),option = 'Cauchy',epsilon=0.001)
Support.function(par.cov = c(1,0.6),option = 'Cauchy',epsilon=0.001)
Support.function(par.cov = c(1,0.4),option = 'Cauchy',epsilon=0.001)
Support.function(par.cov = c(1,0.8),option = 'Cauchy',epsilon=0.01)
Support.function(par.cov = c(1,0.6),option = 'Cauchy',epsilon=0.01)
Support.function(par.cov = c(1,0.4),option = 'Cauchy',epsilon=0.01)
Support.function(par.cov = c(1,0.8),option = 'Cauchy',epsilon=0.05)
Support.function(par.cov = c(1,0.6),option = 'Cauchy',epsilon=0.05)
Support.function(par.cov = c(1,0.4),option = 'Cauchy',epsilon=0.05)
Support.function(par.cov = c(1,0.8),option = 'Cauchy',epsilon=0.01)
Support.function(par.cov = c(1,0.6),option = 'Cauchy',epsilon=0.01)
Support.function(par.cov = c(1,0.4),option = 'Cauchy',epsilon=0.01)
Support.function(par.cov = c(1,0.8),option = 'Cauchy',epsilon=0.05)
Support.function(par.cov = c(1,0.6),option = 'Cauchy',epsilon=0.05)
Support.function(par.cov = c(1,0.4),option = 'Cauchy',epsilon=0.05)
Support.function(par.cov = c(1,0.8),option = 'Cauchy',epsilon=0.005)
Support.function(par.cov = c(1,0.6),option = 'Cauchy',epsilon=0.005)
Support.function(par.cov = c(1,0.4),option = 'Cauchy',epsilon=0.005)
Cov_Cauchy(24*sqrt(2),1,1,0.5)
Cov_Cauchy(24*sqrt(2),1,1)
Cov_Matern(24*sqrt(2),1,2,1)
Cov_Matern(20*sqrt(2),1,2,1)
Cov_Cauchy(20*sqrt(2),1,0.5)
Cov_Cauchy(20*sqrt(2),1,0.6)
Cov_Cauchy(20*sqrt(2),1,0.8)
Cov_GenCauchy(20*sqrt(2),1,0.3,0.5,2)
#' ---
#' title: "Parametric_MLE_nugget"
#' author: "Whim Wang"
#' date: "9/4/2020"
#' output: html_document
#' ---
#'
#'
#' Calculate -2loglik value of Gaussian
#' @param par,length 3, [1] nugget effect [2-3] theta_1, theta_2
#' @param Y
#' @param rho_matrix
#' @param approx.option
#' @param approx.par
## ---------------------------------------------------------------------------------------------------------------------------------------
Two.Neg.Log.Gaussian.given_pars.with.nugget <- function(par,Y,rho_matrix,approx.option=2,approx.par = 10^(-8)){
nugget = par[1];
par.cov = par[2:length(par)]
Sigma = matrix(sapply(rho_matrix, Cov_Gaussian, theta_1 = par.cov[1], theta_2 = par.cov[2]),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*nugget
Two.Neg.Log.Likelihood.Use.Sigma(Y,Sigma,approx.option = approx.option,approx.par = approx.par)
}
Two.Neg.Log.Exp.given_pars.with.nugget <- function(par,Y,rho_matrix,approx.option=2,approx.par = 10^(-8)){
nugget = par[1];
par.cov = par[2:length(par)]
Sigma = matrix(sapply(rho_matrix, Cov_Exp, theta_1 = par.cov[1], theta_2 = par.cov[2]),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*nugget
Two.Neg.Log.Likelihood.Use.Sigma(Y,Sigma,approx.option = approx.option,approx.par = approx.par)
}
Two.Neg.Log.Matern.given_pars.with.nugget <- function(par,Y,rho_matrix,theta_3 = NULL,approx.option=2,approx.par = 10^(-8)){
nugget = par[1];
par.cov = par[2:length(par)]
Sigma = matrix(sapply(rho_matrix, Cov_Matern,
theta_1 = par.cov[1], theta_2 = par.cov[2],theta_3 = theta_3),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*nugget
Two.Neg.Log.Likelihood.Use.Sigma(Y,Sigma,approx.option = approx.option,approx.par = approx.par)
}
Two.Neg.Log.GenCauchy.given_pars.with.nugget <- function(par,Y,rho_matrix,approx.option=2,approx.par = 10^(-8)){
nugget = par[1];
par.cov = par[2:length(par)]
Sigma = matrix(sapply(rho_matrix, Cov_GenCauchy,
theta_1 = par.cov[1], theta_2 = par.cov[2],theta_3 = 0.5,theta_4 = 2),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*nugget
Two.Neg.Log.Likelihood.Use.Sigma(Y,Sigma,approx.option = approx.option,approx.par = approx.par)
}
Two.Neg.Log.RQ.given_pars.with.nugget <- function(par,Y,rho_matrix,approx.option=2,approx.par = 10^(-8)){
nugget = par[1];
par.cov = par[2:length(par)]
Sigma = matrix(sapply(rho_matrix, Cov_RQ,
theta_1 = par.cov[1], theta_2 = par.cov[2]),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*nugget
Two.Neg.Log.Likelihood.Use.Sigma(Y,Sigma,approx.option = approx.option,approx.par = approx.par)
}
#'
#'
#' Parametric MLE with nugget
## ---------------------------------------------------------------------------------------------------------------------------------------
MLE_est_Exp_with_nugget <- function(par.init,Y,rho_matrix){
if(length(par.init)!=3){
stop('len of par init of Exp should be 3, nugget,theta_1,theta_2')
}
tmp = optim(par=par.init,fn = Two.Neg.Log.Exp.given_pars.with.nugget, method = "L-BFGS-B",
lower = rep(10^(-6),3),
Y = Y, rho_matrix = rho_matrix)
Sigma = matrix(sapply(rho_matrix, Cov_Exp,
theta_1 = tmp$par[2], theta_2 = tmp$par[3]),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*tmp$par[1]
return(list(par = tmp$par,
fvalue = tmp$value,
Sigma = Sigma))
}
MLE_est_Gaussian_with_nugget <- function(par.init,Y,rho_matrix){
if(length(par.init)!=3){
stop('len of par init of Gaussian should be 3, nugget,theta_1,theta_2')
}
tmp = optim(par=par.init,fn = Two.Neg.Log.Gaussian.given_pars.with.nugget, method = "L-BFGS-B",
lower = rep(10^(-6),3),
Y = Y, rho_matrix = rho_matrix)
Sigma = matrix(sapply(rho_matrix, Cov_Gaussian,
theta_1 = tmp$par[2], theta_2 = tmp$par[3]),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*tmp$par[1]
return(list(par = tmp$par,
fvalue = tmp$value,
Sigma = Sigma))
}
MLE_est_Matern_with_nugget <- function(par.init,Y,rho_matrix,theta_3 = NULL){
if(is.null(theta_3)){#theta_3 is not given
theta_3_seq = 1:10
fvalue_seq = numeric(length(theta_3_seq))
par_seq = matrix(0,nrow=length(theta_3_seq),ncol=3)
for(i in 1:length(theta_3_seq)){
tmp = optim(par=par.init,fn = Two.Neg.Log.Matern.given_pars.with.nugget, method = "L-BFGS-B",
lower = rep(10^(-6),3),
Y = Y, rho_matrix = rho_matrix,theta_3 = theta_3_seq[i])
fvalue_seq[i] = tmp$value
par_seq[i,] = tmp$par
}
index=which.min(fvalue_seq)
Sigma = matrix(sapply(rho_matrix, Cov_Matern,
theta_1 = par_seq[index,2], theta_2 = par_seq[index,3],theta_3 = theta_3_seq[index]),
nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*par_seq[index,1]
return(list(par = c(par_seq[index,],theta_3_seq[index]),
fvalue = fvalue_seq[index],
Sigma = Sigma))
}else{#theta_3 is given
tmp = optim(par=par.init,fn = Two.Neg.Log.Matern.given_pars.with.nugget, method = "L-BFGS-B",
lower = rep(10^(-6),3),
Y = Y, rho_matrix = rho_matrix,theta_3 = theta_3)
Sigma = matrix(sapply(rho_matrix, Cov_Matern,
theta_1 = tmp$par[2], theta_2 = tmp$par[3],theta_3 = theta_3),
nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*tmp$par[1]
return(list(par=c(tmp$par,theta_3),
fvalue = tmp$value,
Sigma = Sigma))
}
}
MLE_est_GenCauchy_with_nugget <- function(par.init,Y,rho_matrix){
if(length(par.init)!=3){
stop('len of par init of GenCauchy should be 3, nugget,theta_1,theta_2')
}
tmp = optim(par=par.init,fn = Two.Neg.Log.GenCauchy.given_pars.with.nugget, method = "L-BFGS-B",
lower = rep(10^(-6),3),
Y = Y, rho_matrix = rho_matrix)
Sigma = matrix(sapply(rho_matrix, Cov_GenCauchy,
theta_1 = tmp$par[2], theta_2 = tmp$par[3],theta_3 = 0.5,theta_4=2),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*tmp$par[1]
return(list(par = c(tmp$par,0.5,2),
fvalue = tmp$value,
Sigma = Sigma))
}
MLE_est_RQ_with_nugget <- function(par.init,Y,rho_matrix){
if(length(par.init)!=3){
stop('len of par init of RQ should be 3, nugget,theta_1,theta_2')
}
tmp = optim(par=par.init,fn = Two.Neg.Log.RQ.given_pars.with.nugget, method = "L-BFGS-B",
lower = rep(10^(-6),3),
Y = Y, rho_matrix = rho_matrix)
Sigma = matrix(sapply(rho_matrix, Cov_RQ,
theta_1 = tmp$par[2], theta_2 = tmp$par[3]),nrow=nrow(rho_matrix),ncol=ncol(rho_matrix))
Sigma = Sigma + diag(1,nrow=nrow(rho_matrix))*tmp$par[1]
return(list(par = tmp$par,
fvalue = tmp$value,
Sigma = Sigma))
}
#'
#'
#'
#'
#' test
## ----eval=FALSE-------------------------------------------------------------------------------------------------------------------------
## option = 'Exp';par.cov = c(1,2);nugget = 0.2;
##
## l_max=5
## Data.Preparation.result = Data_Preparation_Fixed_range(option,par.cov,d=2,N=2,r=200,n=40,l_max=l_max,seed = 0)
##
## Y = Data.Preparation.result$Output.list$Y_matrix[1,,]
## rho_matrix = Data.Preparation.result$Output.list$rho_matrix.orig
##
## Y = Y + rnorm(length(Y),mean=0,sd=sqrt(nugget))
## true_Sigma = Data.Preparation.result$Hidden.list$True.Sigma_matrix +diag(1,nrow=nrow(rho_matrix)) * nugget
## true_fvalue = Two.Neg.Log.Likelihood.Use.Sigma(Y,Sigma = true_Sigma,approx.option=2,approx.par = 10^(-8))
##
## layout(matrix(1:2,1,2))
## plot(rho_matrix,true_Sigma_R)
## plot(rho_matrix,cov(Y))
##
##
##
## MLE_est_Exp = MLE_est_Exp_with_nugget(par.init = c(0.8,0.8,0.8),Y,rho_matrix)
## MLE_est_Exp$par
## MLE_est_Exp$fvalue
##
##
## MLE_est_Gaussian = MLE_est_Gaussian_with_nugget(par.init = c(0.8,0.8,0.8),Y,rho_matrix)
## MLE_est_Gaussian$par
## MLE_est_Gaussian$fvalue
##
##
## MLE_est_Matern = MLE_est_Matern_with_nugget(par.init = c(0.8,0.8,0.8),Y,rho_matrix,theta_3 = NULL)
## MLE_est_Matern$par
## MLE_est_Matern$fvalue
##
##
## MLE_est_GenCauchy = MLE_est_GenCauchy_with_nugget(par.init = c(0.8,0.8,0.8),Y,rho_matrix)
## MLE_est_GenCauchy$par
## MLE_est_GenCauchy$fvalue
##
##
## MLE_est_RQ = MLE_est_RQ_with_nugget(par.init = c(0.8,0.8,0.8),Y,rho_matrix)
## MLE_est_RQ$par
## MLE_est_RQ$fvalue
##
##
##
## plot(rho_matrix,true_Sigma,type='p',pch=20,ylim=c(0,2),
##      main = paste0(option,' Cov'))
## lines(rho_seq,sapply(rho_seq,Cov_function,option=option,par.cov = par.cov),lty='dashed',lwd=2)
##
## lines(rho_seq,sapply(rho_seq, Cov_function,option='Exp',par.cov=MLE_est_Exp$par[2:length(MLE_est_Exp$par)]),col='red',lwd=2)
## points(x=0,y=sum(MLE_est_Exp$par[1:2]),col='red',pch=16)
## #text(1,MLE_est_Exp$par[1],labels = round(MLE_est_Exp$par[1:2],digits=4))
##
## lines(rho_seq,sapply(rho_seq, Cov_function,option='Gaussian',par.cov=MLE_est_Gaussian$par[2:length(MLE_est_Gaussian$par)]),col='green',lwd=2)
## points(x=0,y=sum(MLE_est_Gaussian$par[1:2]),col='green',pch=16)
## #text(1,Gaussian_est$par[1],labels = round(Gaussian_est$par[1],digits=4))
##
## lines(rho_seq,sapply(rho_seq, Cov_function,option='Matern',par.cov=MLE_est_Matern$par[2:length(MLE_est_Matern$par)]),col='blue',lwd=2)
## points(x=0,y=sum(MLE_est_Matern$par[1:2]),col='blue',pch=16)
## #text(1,Matern_est$par[1],labels = round(Matern_est$par[1],digits=4))
##
## lines(rho_seq,sapply(rho_seq, Cov_function,option='GenCauchy',par.cov=MLE_est_GenCauchy$par[2:length(MLE_est_GenCauchy$par)]),
##       col='orange',lwd=2)
## points(x=0,y=sum(MLE_est_GenCauchy$par[1:2]),col='orange',pch=16)
## #text(1,GenCauchy_est$par[1],labels = round(GenCauchy_est$par[1],digits=4))
##
##
## lines(rho_seq,sapply(rho_seq, Cov_function,option='RQ',par.cov=MLE_est_RQ$par[2:length(MLE_est_RQ$par)]),col='purple',lwd=2)
## points(x=0,y=sum(MLE_est_RQ$par[1:2]),col='purple',pch=16)
## #text(1,RQ_est$par[1],labels = round(RQ_est$par[1],digits=4))
## if(FALSE){
## legend('topright',legend=c('true','Exp_est','Gaussian_est','Matern_est','GenCauchy_est','RQ_est'),
##                   col = c('black','red','green','blue','orange','purple'),
##                   pch = c(20,rep(NA,5)),
##                   lty = c(NA,rep(1,5)))
## }
##
## legend('topright',legend=c(paste0("true ",option, " (",paste0(round(c(nugget,par.cov),3),collapse = ','),") fvalue:",round(true_fvalue,3)),
## paste0("Exp_est (",paste0(round(MLE_est_Exp$par,3),collapse = ','),") fvalue:",round(MLE_est_Exp$fvalue,3)),
## paste0("Gaussian_est (",paste0(round(MLE_est_Gaussian$par,3),collapse = ','),") fvalue:",round(MLE_est_Gaussian$fvalue,3)),
## paste0("Matern_est (",paste0(round(MLE_est_Matern$par,3),collapse = ','),") fvalue:",round(MLE_est_Matern$fvalue,3)),
## paste0("GenCauchy_est (",paste0(round(MLE_est_GenCauchy$par,3),collapse = ','),") fvalue:",round(MLE_est_GenCauchy$fvalue,3)),
## paste0("RQ_est (",paste0(round(MLE_est_RQ$par,3),collapse = ','),") fvalue:",round(MLE_est_RQ$fvalue,3))
## ),
##                   col = c('black','red','green','blue','orange','purple'),
##                   pch = c(20,rep(NA,5)),
##                   lty = c(NA,rep(1,5)))
##
##
##
#'
#'
#'
#'
#'
## ----eval=FALSE-------------------------------------------------------------------------------------------------------------------------
## knitr::purl('Parametric_MLE_with_nugget.Rmd',documentation = 2L)
View(Two.Neg.Log.Likelihood.Use.Sigma)
View(Data_Preparation)
#code.path = '/Users/wangyiming/Documents/2019 Research Daily/research_code/Code_2020/Updated0620/'
#Server
code.path = "/mnt/home/ywang225/Cov_research/Updated0923/"
source(paste0(code.path,'Code0620/',"Code0912-0919/Part-I.Spectral.Cov.R"))
source(paste0(code.path,'Code0620/',"Code0912-0919/Part-II.Data_Generation.R"))
source(paste0(code.path,'Code0620/',"Code1004-1010/Support.R"))
source(paste0(code.path,'Code0620/',"Code1018-1025/Data_Preparation.R"))
source(paste0(code.path,'Code_other_method/','Huang_code/Huang_Variog.R'))
source(paste0(code.path,'Code_other_method/','Bspline_Choi/Parametric_Choi.R'))
source(paste0(code.path,'Code_other_method/','Bspline_Choi/Bspline_Choi.R'))
source(paste0(code.path,'Code_other_method/','Bspline_Choi/NP_Choi_Estimation.R'))
source(paste0(code.path,'Code_other_method/','Cov_Variog_Weighted_MSE.R'))
code.path = '/Users/wangyiming/Documents/2019 Research Daily/research_code/Code_2020/Updated0620/'
#Server
#code.path = "/mnt/home/ywang225/Cov_research/Updated0923/"
source(paste0(code.path,'Code0620/',"Code0912-0919/Part-I.Spectral.Cov.R"))
source(paste0(code.path,'Code0620/',"Code0912-0919/Part-II.Data_Generation.R"))
source(paste0(code.path,'Code0620/',"Code1004-1010/Support.R"))
source(paste0(code.path,'Code0620/',"Code1018-1025/Data_Preparation.R"))
source(paste0(code.path,'Code_other_method/','Huang_code/Huang_Variog.R'))
source(paste0(code.path,'Code_other_method/','Bspline_Choi/Parametric_Choi.R'))
source(paste0(code.path,'Code_other_method/','Bspline_Choi/Bspline_Choi.R'))
source(paste0(code.path,'Code_other_method/','Bspline_Choi/NP_Choi_Estimation.R'))
source(paste0(code.path,'Code_other_method/','Cov_Variog_Weighted_MSE.R'))
View(Choi_Empirical_Cov)
